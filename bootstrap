#!/usr/bin/env python
from __future__ import print_function
import argparse
import fnmatch
import logging
import inspect
import os
import shutil
import sys

if sys.version_info.major == 2:
    input = raw_input

parser = argparse.ArgumentParser()
parser.add_argument("bootstrap_path",
                    nargs="?",
                    default=os.getcwd(),
                    help="path to bootstrap to  (default: %(default)s)")
parser.add_argument("-d", "--debug",
                    dest="debug",
                    action="count")
parser.add_argument("--dry-run",
                    dest="dry_run",
                    action="store_true",
                    help="don't do anything just show what would be done")
parser.add_argument("-m", "--modules",
                    dest="modules",
                    nargs="+",
                    default=[],
                    help="install module (default: all availble modules)")
options = parser.parse_args()

DRY_RUN = options.dry_run
DOTFILES_ROOT = os.path.dirname(os.path.abspath(__file__))
BOOTSTRAP_PATH = options.bootstrap_path
logging.basicConfig(format='%(levelname)-5s: %(message)s')
logging.getLogger().setLevel("DEBUG" if options.debug else "INFO")

logging.debug("DOTFILES_ROOT: %s", DOTFILES_ROOT)
logging.debug("BOOTSTRAP_PATH: %s", BOOTSTRAP_PATH)
logging.debug("MODULES: %s", options.modules)

backup_all = False
overwrite_all = False
skip_all = False


def copymode(src_path, dest_path):
    logging.debug("copymode - %s -> %s", src_path, dest_path)
    if not DRY_RUN:
        shutil.copymode(src_path, dest_path)


def makedirs(path):
    logging.debug("makedirs - %s", path)
    if not DRY_RUN:
        os.makedirs(path)


def move(src_path, dest_path):
    logging.debug("move - %s -> %s", src_path, dest_path)
    if not DRY_RUN:
        shutil.move(src_path, dest_path)


def remove(file_path):
    logging.debug("remove - %s", file_path)
    if not DRY_RUN:
        os.remove(file_path)


def symlink(source, link_name):
    logging.debug("symlink - %s -> %s", source, link_name)
    if not DRY_RUN:
        os.symlink(source, link_name)


def rglob(path, pattern):
    """ Recursive glob """
    for root, dirnames, filenames in os.walk(path):
        for dirname in fnmatch.filter(dirnames, pattern):
            yield os.path.join(root,dirname)
        for filename in fnmatch.filter(filenames, pattern):
            yield os.path.join(root, filename)


def user_input(msg, choices):
    """ Get user input until a correct choice is made """
    while True:
        action = input(msg + " : ")
        if action in choices:
            return action
        else:
            print("Unkown option {}".format(action))


def install_module(module_name, module_path, install_path,
                   include_dir=False, ignore=False):
    """ Install a module from 'moduel_path' to 'install_path'.

    All files and directories created in the root install path are
    are hidden by prefixing with a dot.

    Files that end with .symlink are symlinked to the 'install_path'
    using the modules directory hierarchy.
    """
    if ignore:
        logging.info("Ignoring module %s", module_name)
        return

    logging.info("Installing module %s", module_name)

    global backup_all, overwrite_all, skip_all
    for src_abs in rglob(module_path, "*.symlink"):
        dest_dir = install_path
        src_rel = os.path.relpath(src_abs, start=module_path)
        src_dirs = src_rel.split("/")[:-1]
        src_fname = os.path.basename(src_abs)
        dest_fname = src_fname[:-8]

        if include_dir:
            src_dirs.insert(0, module_name)

        if src_dirs:
            # Create dest directory structure and copy permissions.
            dest_dir = os.path.join(dest_dir,
                                    "." + src_dirs[0],
                                    *tuple(src_dirs[1:]))
            if not os.path.exists(dest_dir):
                makedirs(dest_dir)
                copymode(os.path.dirname(src_abs), dest_dir)
        else:
            dest_fname = "." + dest_fname

        dest_abs = os.path.join(dest_dir, dest_fname)
        logging.info("%s %s %s", src_abs, " -> ", dest_abs)

        backup = False
        overwrite = False
        dest_exists = os.path.exists(dest_abs)
        if dest_exists and not overwrite_all and not backup_all:
            if skip_all:
                continue

            msg = ("File already exists: {}\n"
                   "[s]kip, [S]kip all, "
                   "[o]verwrite, [O]verwrite all, "
                   "[b]ackup, [B]ackup all, "
                   "[a]bort").format(dest_abs)
            action = user_input(msg, "sSoOabB")

            if action == "a":
                exit(1)
            elif action == "s":
                continue
            elif action == "S":
                skip_all = True
                continue
            elif action == "b":
                backup = True
            elif action == "B":
                backup_all = True
            elif action == "O":
                overwrite_all = True
        if dest_exists and (overwrite or overwrite_all):
            remove(dest_abs)
        elif dest_exists and (backup or backup_all):
            move(dest_abs, dest_abs + ".backup")
        symlink(src_abs, dest_abs)


def get_install_keywords():
    spec = inspect.getargspec(install_module)
    kwargs = spec.args[len(spec.args) - len(spec.defaults):]
    kwargs = dict(zip(kwargs, spec.defaults))
    return kwargs


def run():

    for module in os.listdir(DOTFILES_ROOT):
        if module.startswith("."):
            continue

        module_info = module.split(".")
        module_name, module_options = module_info[0], module_info[1:]

        if options.modules and module_name not in options.modules:
            continue

        install_kwargs = get_install_keywords()

        for option in module_options:
            if option in install_kwargs:
                install_kwargs[option] = True
            else:
                logging.info("Unkown module option %s for module %s",
                             option, module)

        module_path = os.path.join(DOTFILES_ROOT, module)

        install_module(module_name, module_path, BOOTSTRAP_PATH,
                       **install_kwargs)


if __name__ == "__main__":
    run()
